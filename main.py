# Importa a biblioteca math para utilizar a fun√ß√£o cos()
import math

# Fun√ß√£o que implementa o M√©todo de Newton
def newton(f, u, epsilon, N0=100):
    
    # Fun√ß√£o para calcular a derivada da fun√ß√£o f usando a f√≥rmula das diferen√ßas finitas
    def df(x):
        h = 1e-6  # Define um valor pequeno para h
        # Calcula a derivada usando a f√≥rmula das diferen√ßas finitas central
        return (f(x + h) - f(x - h)) / (2 * h) 
    
    # Itera√ß√£o do m√©todo de Newton
    for i in range(N0):
        # Calcula a raz√£o entre a fun√ß√£o e sua derivada no ponto u
        du = f(u) / df(u) 
        # Atualiza o valor de v usando a f√≥rmula de Newton
        v = u - du 
        
        # Verifica se a aproxima√ß√£o atual atende √† toler√¢ncia epsilon
        if abs(v - u) < epsilon:
            return v  # Retorna o valor atual de v
        
        # Atualiza o valor de u para a pr√≥xima itera√ß√£o
        u = v 
    
    # Se o m√©todo n√£o convergir em N0 itera√ß√µes, retorna None
    return None

def resolver_equacao(f, ponto_inicial, ep, raiz_string):
    # Encontra a raiz da fun√ß√£o f com ponto inicial e toler√¢ncia especificados
    raiz = newton(f, ponto_inicial, ep)  
    if raiz is not None:
        # Imprime a raiz encontrada para a fun√ß√£o
        print(f"A raiz de {raiz_string} √©:", raiz)  
    else:
        # Imprime uma mensagem se o m√©todo n√£o convergir para a fun√ß√£o
        print("O m√©todo n√£o convergiu para uma raiz de f")  
    
    # Imprime a toler√¢ncia utilizada
    print(f"Toler√¢ncia utilizada:{ep}\n")  

def main():
  # EXERCICIO 1 (
    print("EXERCICIO 1:")
    # Definindo as fun√ß√µes que se deseja encontrar ra√≠zes
    def f1(x):
        # Fun√ß√£o f1(x) = x^3 + 4x^2 - 10
        return x**3 + 4*x**2 - 10  
    
    def f2(x):
        # Fun√ß√£o f2(x) = cos(x) - x
        return math.cos(x) - x  
    
    # Encontrando as ra√≠zes de f1 e f2 utilizando o m√©todo de Newton
    resolver_equacao(f1, 1, 1e-1, "x**3 + 4*x**2 - 10")
    resolver_equacao(f2, 1, 1e-1, "cos(x) - x") 
  
#)

# EXERCICIO 2 (
    print("\nEXERCICIO 2:")
    def fc(x):
        # Fun√ß√£o fc(x) = ùë•ÀÜ3 ‚àí 2ùë•ÀÜ2 ‚àí 5
        return x**3 - 2*x**2 - 5
    
    def fd(x):
        # Fun√ß√£o fd(x) = ùëíùë• -3x2
        return 2.71828 - 3*x**2

# Encontrando as ra√≠zes de a,b,c e d utilizando o m√©todo de Newton
    print("A)")
    resolver_equacao(f1, 1, 1e-3, "x**3 + 4*x**2 - 10")
    print("B)")
    resolver_equacao(f2, 1, 1e-3, "cos(x) - x")
    print("C)")
    resolver_equacao(fc, 1, 1e-3, "x**3 - 2*x**2 - 5")
    print("D)")
    resolver_equacao(fd, 1, 1e-3, "x**3 - 2*x**2 - 5")
#)
main()  # Executa a fun√ß√£o main()

